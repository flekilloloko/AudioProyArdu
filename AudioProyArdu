#define ARM_MATH_CM3
#include <arm_math.h>




uint32_t fftSize = 1024;
int8_t  posShift = 1;

float salida[fftSize];
q31_t muestreo[fftSize] = {0};


q31_t estados[4];
q31_t coef[6];

void setup()
{
  Serial.begin(9600); 

}



void llenar_muestras(q31_t *arreglo){
  for(int i=0 ; i<fftSize; i++){
    arreglo[i] = (q31_t) ((cos(PI*2*1000*i*(1/50000)) + cos(PI*2*7000*i*(1/50000) )) * (1<<29)); //50 KHz de muestreo
  }
}



void llenar_coef(q31_t *arreglo){
  arreglo[0] = (0.644044808751193 / (1<<1)) * (1<<31);  // b0
  arreglo[1] = 0;
  arreglo[2] = (-1.28808961750239 / (1<<1)) * (1<<31);  // b1
  arreglo[3] = (0.644044808751193 / (1<<1)) * (1<<31);  // b2
  arreglo[4] = (-1.08616999241551 / (1<<1)) * (1<<31);  // a1
  arreglo[5] = (0.490009242589262 / (1<<1)) * (1<<31);  // a2
}

void loop() {
  
  arm_biquad_casd_df1_inst_q31 F;
  

  llenar_coef(coef);
  llenar_muestras(muestreo);
  //tiempo = millis();

  arm_biquad_cascade_df1_init_q31(&F, 1, coef, estados, posShift);
  
  //tiempo -= millis(); 

 arm_biquad_cascade_df1_fast_q31(&F, muestreo, salida, fftSize);

   Serial.print("_");
  for(int i = 0; i<fftSize; i++) {
      Serial.print(salida[i]/(1<<20));
      Serial.print(",");
      
      Serial.flush();
      
  }
  //Serial.print("la conv tomó: ");Serial.print(tiempo);
  
  /*Serial.print("Andas!!_");
  delay(500);*/
  delay(2000);
}
  
